services:
  redis:
    image: redis:7-alpine
    container_name: ai-galaxy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --appendfsync everysec
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-galaxy

  chromadb:
    image: chromadb/chroma:latest
    container_name: ai-galaxy-chroma
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/dev/null
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic.BasicAuthenticationServerProvider
      - ALLOW_RESET=TRUE
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    networks:
      - ai-galaxy

  ai-galaxy-backend:
    build: .
    container_name: ai-galaxy-backend
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
      - ./generated_code:/app/generated_code
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - PYTHONPATH=/app
    depends_on:
      - redis
      - chromadb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-galaxy

  ai-galaxy-frontend:
    build: ./frontend
    container_name: ai-galaxy-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
    depends_on:
      - ai-galaxy-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - ai-galaxy

volumes:
  redis_data:
    driver: local
  chroma_data:
    driver: local

networks:
  ai-galaxy:
    driver: bridge